import numpy as np



#transition probabilities
transition = np.array([[0.8,0.1],
                       [0.1,0.8]])
#Emission probabilities
emission = np.array([[0.1,0.2,0.7],
                     [0.7,0.2,0.1]])

#defining states and sequence symbols
states = ['H','C']#hidden state
states_dic = {'H':0, 'C':1}
sequence_syms = {'1':0,'2':1,'3':2}#obsevable state
sequence = ['1','2','3']


test_sequence = '331122313'
test_sequence = [x for x in test_sequence]


end_probs = [0.1, 0.1]#the respective probability that the hidden state sequence ends with H and C

start_probs = [0.5, 0.5]#the respective probability that the hidden state sequnce starts with H and C


#This is the forward function 
def forward_probs():
   
    node_values_fwd = np.zeros((len(states), len(test_sequence)))#the new matrix of size 2x6

    for i, sequence_val in enumerate(test_sequence):
        for j in range(len(states)):
            
            if (i == 0):
                node_values_fwd[j, i] = start_probs[j] * emission[j, sequence_syms[sequence_val]]
                #updates the value of the matrix .If i is 0 it means  its the first state and we dont need to consider
                #the transition values.
                
            
            else:
                values = [node_values_fwd[k, i - 1] * emission[j, sequence_syms[sequence_val]] * transition[k, j] for k in
                          range(len(states))]
                node_values_fwd[j, i] = sum(values)
                #for anyother value of i the probability value is calculated by considering the transition and
                #for a particular sequence say 31 all the possible transition sequence is calculated and summing it up gives
                #total probability

    
    end_state = np.multiply(node_values_fwd[:, -1], end_probs)#updating  the end probability as it will be required for backward propagation
    #the end state is the multiplication of end probability and the values of the last column of the new matrix made.
    end_state_val = sum(end_state)
    print (node_values_fwd)
    print (end_state_val)
    return node_values_fwd, end_state_val




def backward_probs():
   
    node_values_bwd = np.zeros((len(states), len(test_sequence)))#the new matrix of 2x6

    
    for i in range(1,len(test_sequence)+1):
        for j in range(len(states)):
            
            if (-i == -1):
                node_values_bwd[j, -i] = end_probs[j]#starting from end of matrix the probability will be comsidered using the 
                #end probability similar to the use of starting probabilty in forward_probs() function.
            
            else:
                values = [node_values_bwd[k, -i+1] * emission[k, sequence_syms[test_sequence[-i+1]]] * transition[j, k] for k in range(len(states))]
                node_values_bwd[j, -i] = sum(values)#similar to the finding of probaility in forward function,the same has been done
                #here.

    
    start_state = [node_values_bwd[m,0] * emission[m, sequence_syms[test_sequence[0]]] for m in range(len(states))]
    start_state = np.multiply(start_state, start_probs)#updatin the start probability so as to use it for the second iteration of
    #forward probability.
    start_state_val = sum(start_state)
    return node_values_bwd, start_state_val



#the si function is used for calculation which can be used later for updating the transition matrix
def si_probs(forward, backward, forward_val):

    si_probabilities = np.zeros((len(states), len(test_sequence)-1, len(states)))

    for i in range(len(test_sequence)-1):
        for j in range(len(states)):
            for k in range(len(states)):
                si_probabilities[j,i,k] = ( forward[j,i] * backward[k,i+1] * transition[j,k] * emission[k,sequence_syms[test_sequence[i+1]]] ) \
                                                    / forward_val
    return si_probabilities

def gamma_probs(forward, backward, forward_val):#used later for updating the emission matrix

    gamma_probabilities = np.zeros((len(states), len(test_sequence)))

    for i in range(len(test_sequence)):
        for j in range(len(states)):
            
            gamma_probabilities[j, i] = (forward[j, i] * backward[j, i]) / forward_val

    return gamma_probabilities


#considering seq NN and hidden state s1 and s2 the probability the probability considering the transition from s1 to s2 is
#P(s1)*P(N|s1)*P(s1->s2)*P(N|s2)
#that is the formula used for the alculations of probability

for iteration in range(2000):

    print('\nIteration No: ', iteration + 1)
    

    #Calling probability functions to calculate all probabilities
    fwd_probs, fwd_val = forward_probs()
    print(fwd_val)
    bwd_probs, bwd_val = backward_probs()
    si_probabilities = si_probs(fwd_probs, bwd_probs, fwd_val)
    gamma_probabilities = gamma_probs(fwd_probs, bwd_probs, fwd_val)

   
    a = np.zeros((len(states), len(states)))
    b = np.zeros((len(states), len(sequence_syms)))

    #'a' matrix
    #the matrix is updated by summing up the probabilities that we calculated and dividing it with the best sequence of hidden state
    for j in range(len(states)):
        for i in range(len(states)):
            for t in range(len(test_sequence)-1):
                a[j,i] = a[j,i] + si_probabilities[j,t,i]

            denomenator_a = [si_probabilities[j, t_x, i_x] for t_x in range(len(test_sequence) - 1) for i_x in range(len(states))]
            denomenator_a = sum(denomenator_a)

            if (denomenator_a == 0):
                a[j,i] = 0
            else:
                a[j,i] = a[j,i]/denomenator_a

    #'b' matrix
    #updating the emission matrix with the values from gamma function
    for j in range(len(states)): #states
        for i in range(len(sequence)): #seq
            indices = [idx for idx, val in enumerate(test_sequence) if val == sequence[i]]
            numerator_b = sum( gamma_probabilities[j,indices] )
            denomenator_b = sum( gamma_probabilities[j,:] )

            if (denomenator_b == 0):
                b[j,i] = 0
            else:
                b[j, i] = numerator_b / denomenator_b


    print('\nMatrix a:\n')
    print(np.matrix(a.round(decimals=4)))
    print('\nMatrix b:\n')
    print(np.matrix(b.round(decimals=4)))

    transition = a
    emission = b

    new_fwd_temp, new_fwd_temp_val = forward_probs()
    print('New forward probability: ', new_fwd_temp_val)
    diff = np.abs(fwd_val - new_fwd_temp_val)
    print('Difference in forward probability: ', diff)

    if (diff <0.0000001):
        break


c = 1

